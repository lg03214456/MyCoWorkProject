"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.13.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

load_dotenv()  # 載入 .env 檔

# 環境標記：development / production
ENV = os.getenv('ENV', 'development').lower()

# 根據 ENV 決定使用哪個 API URL
if ENV == 'production':
    FLASK_API_URL = os.getenv('FLASK_API_URL_PRODUCTION')
else:
    FLASK_API_URL = os.getenv('FLASK_API_URL_DEVELOPMENT')
    

BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 所有上傳檔案預設存這裡

# # # 設定金鑰版本
JWT_KEY_VERSION = "20250421"  # 根據實際金鑰版本設定

BASE_DIR = Path(__file__).resolve().parent.parent  # backend-django/
JWT_KEY_DIR = BASE_DIR / "authenticator" /  "jwt_keys"      # backend-django/authenticator

print("🔐 正在使用的金鑰路徑：", JWT_KEY_DIR)

# 讀取私鑰
with open(JWT_KEY_DIR / f"key-{JWT_KEY_VERSION}-private.pem", "rb") as f:
    PRIVATE_KEY = f.read()

# 讀取公鑰
with open(JWT_KEY_DIR / f"key-{JWT_KEY_VERSION}-public.pem", "rb") as f:
    PUBLIC_KEY = f.read()

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


SIMPLE_JWT = {
    'ALGORITHM': 'RS256',
    'SIGNING_KEY': PRIVATE_KEY,
    'VERIFYING_KEY': PUBLIC_KEY,
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'JTI_CLAIM': 'jti',
    'TOKEN_OBTAIN_SERIALIZER': 'myapp.serializers.MyTokenObtainPairSerializer',
    
}


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fshi!_eq905a9w$$x7wh@03s09buwqi*uz@h#*0t076(n8b=9@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",   # ✅ 允許本機開發（localhost）訪問 Django API
    "http://127.0.0.1:5173",   # ✅ 允許使用 127.0.0.1 作為前端來源（等於 localhost）
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://26\.\d{1,3}\.\d{1,3}\.\d{1,3}:5173$", # ✅ 允許任何 26.X.X.X:5173 來源的前端（例如 VPN IP）
]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'authenticator',
    'filemanager',
    'corsheaders',
    'rest_framework',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',  # 放在它前面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'NAME': 'mydatabase',                 # SQL Server 資料庫名稱
        'USER': 'sa',                     # SQL Server 用戶名
        'PASSWORD': '12345678',             # SQL Server 密碼
        'HOST': 'DESKTOP-2U628GL',                  # SQL Server 主機地址
        'PORT': '1433',                       # SQL Server 默認端口
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',  # 使用的 ODBC 驅動
            'TrustServerCertificate': 'yes',
        },
    },
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ✅ 使用 Argon2 作為密碼雜湊演算法（建議放在 settings.py 裡）
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',           # ✅ 第一順位：最安全
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',           # 備援用
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
